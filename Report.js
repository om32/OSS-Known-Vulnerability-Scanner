let ctx = document.getElementById("vulchart").getContext("2d");

readTextFile("/severity.json", function(text){
    var severityCount = JSON.parse(text);
    console.log(jason);
});

readTextFile("/vulnerabilities.json", function(text){
    var vulnerabilities = JSON.parse(text);
    console.log(vulnerabilities);
});

function readTextFile(file, callback) {
    var rawFile = new XMLHttpRequest();
    rawFile.overrideMimeType("application/json");
    rawFile.open("GET", file, true);
    rawFile.onreadystatechange = function() {
        if (rawFile.readyState === 4 && rawFile.status == "200") {
            callback(rawFile.responseText);
        }
    }
   
}

let critical = severityCount .Critical;
let high = severityCount .High;
let medium = severityCount .Medium;
let low = severityCount .Low;
let none = severityCount .None;
let total = Number(high + low + medium + critical + none);

function calcPercent(x) {
  return (x / total) * 100;
}

let percentCritical = calcPercent(critical);
let percentHigh = calcPercent(high);
let percentMedium = calcPercent(medium);
let percentLow = calcPercent(low);
let percentNone = calcPercent(none);

let analysisChart = new Chart(ctx, {
  type: "doughnut",
  data: {
    datasets: [
      {
        data: [
          percentCritical,
          percentHigh,
          percentMedium,
          percentLow,
          percentNone,
        ],

        backgroundColor: [
          "#3f0101",
          "#b40101",
          "#e46f01",

          "#e4c305",
          "#006400",
        ],
        borderWidth: 0,
      },
    ],
  },
  options: {
    maintainAspectRatio: false,

    plugins: {
      labels: {
        display: false,
      },
    },
  },
});

// labels
document.getElementById("Criticalnumber").innerHTML = critical;
document.getElementById("Highnumber").innerHTML = high;
document.getElementById("Mediumnumber").innerHTML = medium;
document.getElementById("Lownumber").innerHTML = low;
document.getElementById("Nonenumber").innerHTML = none;

//table

//json


//table
let table = document.getElementById("table");
let rows = document.getElementById("table").rows.length - 1;

if (vulnerabilities.length > 0) {
  for (let i = 0; i < vulnerabilities.length; i++) {
    if (vulnerabilities[i].ossVulnerabilities[0] !== undefined) {
		
		for (let j = 0; j < vulnerabilities[i].ossVulnerabilities.length; j++) {
	
      let template = `<tr>
	  <td>
	  <li class="${vulnerabilities[i].ossVulnerabilities[j].severity}">${vulnerabilities[i].ossVulnerabilities[j].severity}</li>
	  <li>${vulnerabilities[i].ossVulnerabilities[j].cvssScore}</li>
	  <li class="link"><a href="https://nvd.nist.gov/vuln/detail/${vulnerabilities[i].ossVulnerabilities[j].cveID}">${vulnerabilities[i].ossVulnerabilities[j].cveID}</a></li>
	  <li class="link"><a href="https://cwe.mitre.org/data/definitions/${vulnerabilities[i].ossVulnerabilities[j].cweID.substring(4)}.html">${vulnerabilities[i].ossVulnerabilities[j].cweID}</a></li>
	  </td>
	  <td>${vulnerabilities[i].name}</td>
	  <td>${vulnerabilities[i].ossVulnerabilities[j].description}</td>
	  </tr>`;
      const newRow = (table.innerHTML += template);
		}
    }
  }
}
